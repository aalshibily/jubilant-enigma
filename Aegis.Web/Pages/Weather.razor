@page "/weather"
@using Aegis.Core.Domain.Entities
@using Aegis.Core.Exceptions
@using Aegis.Core.Interfaces.Services
@using Aegis.Web.Components
@using System.Text.Json
@inject HttpClient Http
@inject IHttpClientFactory _clientFactory

<PageTitle>Weather Alerts</PageTitle>

<h1>Weather Alerts</h1>

<p>This component demonstrates fetching weather alerts from the <a href="https://www.weather.gov/documentation/services-web-api" target="_blank">National Weather Service API</a>.</p>

@if(states != null)
{
    <InputSelect @bind-Value="selectedState" class="form-select mb-3" aria-label="State select dropdown">
        @foreach (var state in states)
        {
            <option value="@state.Value">@state.Key</option>
        }
    </InputSelect>
    <Button @onclick="GetWeather" Color="ButtonColor.Primary">Get State</Button>
}

@if(Alerts.Count > 0)
{
    <div class="container py-3">
        @foreach (var alert in Alerts)
        {
            <AlertCard Alert="alert" />
        }
    </div>
}
else if(NoAlerts)
{
    <div class="alert alert-warning text-center" role="alert">
        <strong>Good News!</strong> No alerts found for this state(@selectedState).
    </div>
}
else if(ApiError)
{
    <div class="alert alert-danger text-center" role="alert">
        <strong>Oh no!</strong> There was an error fetching the alerts. API might be down.
    </div>
})

@code {
    //private WeatherForecast[]? forecasts;
    Dictionary<string, string> states;
    private string selectedState;
    private HttpClient _weather;
    private List<SmallAlert> Alerts = new List<SmallAlert>();
    private bool NoAlerts = false;
    private bool ApiError = false;

    [Inject]
    private IWeatherService weatherService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _weather = _clientFactory.CreateClient("weather");
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        states = await Http.GetFromJsonAsync<Dictionary<string,string>>("sample-data/states.json");
        if(states.Count > 0)
        {
            selectedState = states.FirstOrDefault().Value;
        }
    }

    private async Task GetWeather()
    {
        Alerts.Clear();
        try
        {
            var response = await weatherService.GetAlertsByState(selectedState);
            if(response != null)
            {
                Alerts = response.ToList();
            }
        }
        catch (JsonException)
        {
            NoAlerts = true;
        }
        catch (BadGatewayException)
        {
            NoAlerts = false;
            ApiError = true;
        }
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
